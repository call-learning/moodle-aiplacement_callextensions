define("aiplacement_callextensions/form_wizard",["exports","core_form/modalform","./modal_wizard","core_form/changechecker","core/fragment","core/ajax"],(function(_exports,_modalform,_modal_wizard,FormChangeChecker,_fragment,_ajax){function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Wizard form for the CALL Learning placement module.
   *
   * @module     aiplacement_callextensions/wizardform
   * @copyright  2025 Laurent David <laurent@call-learning.fr>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_modalform=_interopRequireDefault(_modalform),_modal_wizard=_interopRequireDefault(_modal_wizard),FormChangeChecker=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(FormChangeChecker),_fragment=_interopRequireDefault(_fragment),_ajax=_interopRequireDefault(_ajax);class FormWizard extends _modalform.default{constructor(config){config.moduleName=config.moduleName||"aiplacement_callextensions/modal_wizard",config.args.step=config.args.step||1,super(config)}show(){return super.show().then((()=>{this.modal.getRoot().on(_modal_wizard.default.EVENTS.next,(e=>{e.preventDefault();this.trigger(this.events.SUBMIT_BUTTON_PRESSED).defaultPrevented||this.submitFormAjax(_modal_wizard.default.EVENTS.next)})),this.modal.getRoot().on(_modal_wizard.default.EVENTS.previous,(e=>{e.preventDefault();this.trigger(this.events.SUBMIT_BUTTON_PRESSED).defaultPrevented||this.submitFormAjax(_modal_wizard.default.EVENTS.previous)}))}))}async submitFormAjax(){let eventType=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.events.SUBMIT_BUTTON_PRESSED;if(!this.validateElements())return void this.trigger(this.events.CLIENT_VALIDATION_ERROR,null,!1);this.disableButtons();const form=this.modal.getRoot().find("form");let formDataArray=form.serializeArray();const stepIndex=formDataArray.findIndex((item=>"step"===item.name));if(-1!==stepIndex){const currentStep=parseInt(formDataArray[stepIndex].value,10)||1;if(eventType===_modal_wizard.default.EVENTS.next)formDataArray[stepIndex].value=currentStep+1;else if(eventType===_modal_wizard.default.EVENTS.previous){const previousStep=currentStep-1;formDataArray[stepIndex].value=previousStep>=1?previousStep:1}}const formData=new URLSearchParams(formDataArray.map((item=>[item.name,item.value]))).toString();_ajax.default.call([{methodname:"core_form_dynamic_form",args:{formdata:formData,form:this.config.formClass}}])[0].then((response=>{if(response.submitted){const data=JSON.parse(response.data);FormChangeChecker.markFormSubmitted(form[0]);this.trigger(this.events.FORM_SUBMITTED,data).defaultPrevented||this.modal.hide()}else{const promise=new Promise((resolve=>resolve({html:response.html,js:_fragment.default.processCollectedJavascript(response.javascript)})));this.modal.setBodyContent(promise),this.enableButtons(),this.trigger(this.events.SERVER_VALIDATION_ERROR)}return null})).catch((exception=>{this.enableButtons(),this.onSubmitError(exception)}))}}return _exports.default=FormWizard,_exports.default}));

//# sourceMappingURL=form_wizard.min.js.map