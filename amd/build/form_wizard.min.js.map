{"version":3,"file":"form_wizard.min.js","sources":["../src/form_wizard.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Wizard form for the CALL Learning placement module.\n *\n * @module     aiplacement_callextensions/wizardform\n * @copyright  2025 Laurent David <laurent@call-learning.fr>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalForm from 'core_form/modalform';\nimport ModalWizard from \"./modal_wizard\";\nimport * as FormChangeChecker from 'core_form/changechecker';\nimport Fragment from 'core/fragment';\nimport Ajax from 'core/ajax';\n\nexport default class FormWizard extends ModalForm {\n    /**\n     * Constructor\n     *\n     * Shows the required form inside a modal dialogue\n     *\n     * @param {Object} config parameters for the form and modal dialogue:\n     * @paramy {String} config.formClass PHP class name that handles the form (should extend \\core_form\\modal )\n     * @paramy {String} config.moduleName module name to use if different to core/modal_save_cancel (optional)\n     * @paramy {Object} config.modalConfig modal config - title, header, footer, etc.\n     *              Default: {removeOnClose: true, large: true}\n     * @paramy {Object} config.args Arguments for the initial form rendering (for example, id of the edited entity)\n     * @paramy {String} config.saveButtonText the text to display on the Modal \"Save\" button (optional)\n     * @paramy {String} config.saveButtonClasses additional CSS classes for the Modal \"Save\" button\n     * @paramy {HTMLElement} config.returnFocus element to return focus to after the dialogue is closed\n     */\n    constructor(config) {\n        config.moduleName = config.moduleName || 'aiplacement_callextensions/modal_wizard';\n        config.args.step = config.args.step || 1; // Default to step 1 if not provided.\n        super(config);\n    }\n    show() {\n        // Show the modal.\n        return super.show().then(() => {\n            // When Next is clicked, we trigger the save then move to the next step.\n            this.modal.getRoot().on(ModalWizard.EVENTS.next, (e) => {\n                e.preventDefault();\n                const event = this.trigger(this.events.SUBMIT_BUTTON_PRESSED);\n                if (!event.defaultPrevented) {\n                    this.submitFormAjax(ModalWizard.EVENTS.next);\n                }\n            });\n\n            // When Previous is clicked, we trigger the save then move to the previous step.\n            this.modal.getRoot().on(ModalWizard.EVENTS.previous, (e) => {\n                e.preventDefault();\n                const event = this.trigger(this.events.SUBMIT_BUTTON_PRESSED);\n                if (!event.defaultPrevented) {\n                    this.submitFormAjax(ModalWizard.EVENTS.previous);\n                }\n            });\n        });\n    }\n\n    /**\n     * Submit the form via AJAX call to the core_form_dynamic_form WS\n     * @param {String} eventType The type of event to trigger when the form is submitted.\n     */\n    async submitFormAjax(eventType = this.events.SUBMIT_BUTTON_PRESSED) {\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (!this.validateElements()) {\n            this.trigger(this.events.CLIENT_VALIDATION_ERROR, null, false);\n            return;\n        }\n        this.disableButtons();\n\n        // Convert all the form elements values to a serialised string.\n        const form = this.modal.getRoot().find('form');\n        let formDataArray = form.serializeArray();\n        const stepIndex = formDataArray.findIndex(item => item.name === 'step');\n        if (stepIndex !== -1) {\n            const currentStep = parseInt(formDataArray[stepIndex].value, 10) || 1;\n            if (eventType === ModalWizard.EVENTS.next) {\n                formDataArray[stepIndex].value = currentStep + 1;\n            } else if (eventType === ModalWizard.EVENTS.previous) {\n                const previousStep = currentStep - 1;\n                formDataArray[stepIndex].value = previousStep >= 1 ? previousStep : 1;\n            }\n        }\n        const formData = new URLSearchParams(\n            formDataArray.map(item => [item.name, item.value])\n        ).toString();\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData,\n                form: this.config.formClass\n            }\n        }])[0]\n            .then((response) => {\n                if (!response.submitted) {\n                    // Form was not submitted because validation failed.\n                    const promise = new Promise(\n                        resolve => resolve({html: response.html, js: Fragment.processCollectedJavascript(response.javascript)}));\n                    this.modal.setBodyContent(promise);\n                    this.enableButtons();\n                    this.trigger(this.events.SERVER_VALIDATION_ERROR);\n                } else {\n                    // Form was submitted properly. Hide the modal and execute callback.\n                    const data = JSON.parse(response.data);\n                    FormChangeChecker.markFormSubmitted(form[0]);\n                    const event = this.trigger(this.events.FORM_SUBMITTED, data);\n                    if (!event.defaultPrevented) {\n                        this.modal.hide();\n                    }\n                }\n                return null;\n            })\n            .catch(exception => {\n                this.enableButtons();\n                this.onSubmitError(exception);\n            });\n    }\n\n}\n"],"names":["FormWizard","ModalForm","constructor","config","moduleName","args","step","show","super","then","modal","getRoot","on","ModalWizard","EVENTS","next","e","preventDefault","this","trigger","events","SUBMIT_BUTTON_PRESSED","defaultPrevented","submitFormAjax","previous","eventType","validateElements","CLIENT_VALIDATION_ERROR","disableButtons","form","find","formDataArray","serializeArray","stepIndex","findIndex","item","name","currentStep","parseInt","value","previousStep","formData","URLSearchParams","map","toString","call","methodname","formdata","formClass","response","submitted","data","JSON","parse","FormChangeChecker","markFormSubmitted","FORM_SUBMITTED","hide","promise","Promise","resolve","html","js","Fragment","processCollectedJavascript","javascript","setBodyContent","enableButtons","SERVER_VALIDATION_ERROR","catch","exception","onSubmitError"],"mappings":";;;;;;;+7BA6BqBA,mBAAmBC,mBAgBpCC,YAAYC,QACRA,OAAOC,WAAaD,OAAOC,YAAc,0CACzCD,OAAOE,KAAKC,KAAOH,OAAOE,KAAKC,MAAQ,QACjCH,QAEVI,cAEWC,MAAMD,OAAOE,MAAK,UAEhBC,MAAMC,UAAUC,GAAGC,sBAAYC,OAAOC,MAAOC,IAC9CA,EAAEC,iBACYC,KAAKC,QAAQD,KAAKE,OAAOC,uBAC5BC,uBACFC,eAAeV,sBAAYC,OAAOC,cAK1CL,MAAMC,UAAUC,GAAGC,sBAAYC,OAAOU,UAAWR,IAClDA,EAAEC,iBACYC,KAAKC,QAAQD,KAAKE,OAAOC,uBAC5BC,uBACFC,eAAeV,sBAAYC,OAAOU,2CAUlCC,iEAAYP,KAAKE,OAAOC,0BAEpCH,KAAKQ,oCACDP,QAAQD,KAAKE,OAAOO,wBAAyB,MAAM,QAGvDC,uBAGCC,KAAOX,KAAKR,MAAMC,UAAUmB,KAAK,YACnCC,cAAgBF,KAAKG,uBACnBC,UAAYF,cAAcG,WAAUC,MAAsB,SAAdA,KAAKC,WACpC,IAAfH,UAAkB,OACZI,YAAcC,SAASP,cAAcE,WAAWM,MAAO,KAAO,KAChEd,YAAcZ,sBAAYC,OAAOC,KACjCgB,cAAcE,WAAWM,MAAQF,YAAc,OAC5C,GAAIZ,YAAcZ,sBAAYC,OAAOU,SAAU,OAC5CgB,aAAeH,YAAc,EACnCN,cAAcE,WAAWM,MAAQC,cAAgB,EAAIA,aAAe,SAGtEC,SAAW,IAAIC,gBACjBX,cAAcY,KAAIR,MAAQ,CAACA,KAAKC,KAAMD,KAAKI,UAC7CK,yBAEGC,KAAK,CAAC,CACPC,WAAY,yBACZzC,KAAM,CACF0C,SAAUN,SACVZ,KAAMX,KAAKf,OAAO6C,cAEtB,GACCvC,MAAMwC,cACEA,SAASC,UAOP,OAEGC,KAAOC,KAAKC,MAAMJ,SAASE,MACjCG,kBAAkBC,kBAAkB1B,KAAK,IAC3BX,KAAKC,QAAQD,KAAKE,OAAOoC,eAAgBL,MAC5C7B,uBACFZ,MAAM+C,WAbM,OAEfC,QAAU,IAAIC,SAChBC,SAAWA,QAAQ,CAACC,KAAMZ,SAASY,KAAMC,GAAIC,kBAASC,2BAA2Bf,SAASgB,qBACzFvD,MAAMwD,eAAeR,cACrBS,qBACAhD,QAAQD,KAAKE,OAAOgD,gCAUtB,QAEVC,OAAMC,iBACEH,qBACAI,cAAcD"}