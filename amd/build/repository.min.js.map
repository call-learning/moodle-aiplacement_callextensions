{"version":3,"file":"repository.min.js","sources":["../src/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Gateway to the webservices.\n *\n * @module     aiplacement_callextensions/placement\n * @copyright  2025 Laurent David <laurent@call-learning.fr>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\n\n/**\n * Wizard repository class.\n */\nclass Repository {\n\n    /**\n     * Get action for this wizard (next, previous, finish).\n     * @param {Number} contextid The context id.\n     * @param {Number} userid The user id.\n     * @return {Promise} The promise.\n     */\n    static getActiveAction(contextid, userid) {\n        const request = {\n            methodname: 'aiplacement_callextensions_get_active_action',\n            args: {\n                contextid,\n                userid\n            }\n        };\n        return Ajax.call([request])[0]\n            .fail(Notification.exception);\n    }\n\n    /**\n     * Get action for this wizard (next, previous, finish).\n     * @param {Number} actionid The action id.\n     * @return {Promise} The promise.\n     */\n    static cancelAction(actionid) {\n        const request = {\n            methodname: 'aiplacement_callextensions_cancel_action',\n            args: {actionid}\n        };\n        return Ajax.call([request])[0]\n            .fail(Notification.exception);\n    }\n\n    /**\n     * Launch an action via the core_form_dynamic_form web service.\n     *\n     * @param {Number} actionid The context id.\n     * @return {Promise} The promise resolving the server response.\n     */\n    static actionStatus(actionid) {\n        const request = {\n            methodname: 'aiplacement_callextensions_get_action_status',\n            args: {actionid}\n        };\n        return Ajax.call([request])[0]\n            .fail(Notification.exception);\n    }\n}\n\nexport default Repository;"],"names":["contextid","userid","request","methodname","args","Ajax","call","fail","Notification","exception","actionid"],"mappings":";;;;;;;uNAqC2BA,UAAWC,cACxBC,QAAU,CACZC,WAAY,+CACZC,KAAM,CACFJ,UAAAA,UACAC,OAAAA,gBAGDI,cAAKC,KAAK,CAACJ,UAAU,GACvBK,KAAKC,sBAAaC,+BAQPC,gBACVR,QAAU,CACZC,WAAY,2CACZC,KAAM,CAACM,SAAAA,kBAEJL,cAAKC,KAAK,CAACJ,UAAU,GACvBK,KAAKC,sBAAaC,+BASPC,gBACVR,QAAU,CACZC,WAAY,+CACZC,KAAM,CAACM,SAAAA,kBAEJL,cAAKC,KAAK,CAACJ,UAAU,GACvBK,KAAKC,sBAAaC"}