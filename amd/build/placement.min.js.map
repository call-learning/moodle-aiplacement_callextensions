{"version":3,"file":"placement.min.js","sources":["../src/placement.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to load and render the form for the CALL Learning placement module.\n *\n * @module     aiplacement_callextensions/placement\n * @copyright  2025 Laurent David <laurent@call-learning.fr>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport 'core/copy_to_clipboard';\nimport Notification from 'core/notification';\nimport {getString} from 'core/str';\nimport ModalForm from 'core_form/modalform';\nimport ModalDeleteCancel from 'core/modal_delete_cancel';\nimport Repository from \"./repository\";\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport Policy from 'core_ai/policy';\nimport ModalSaveCancel from \"core/modal_save_cancel\";\n\nconst CALLExtensionAssist = class {\n    /**\n     * The context ID.\n     * @type {Integer}\n     */\n    contextId;\n\n    /**\n     * The current action\n     * @type {String}\n     */\n    currentAction;\n\n    /**\n     * Progress interval.\n     */\n    progressInterval;\n\n    /**\n     * Current user ID.\n     * @type {Integer}\n     */\n    userId;\n\n    /**\n     * Constructor.\n     * @param {String} actionButtonSelector The selector for the action button.\n     */\n    constructor(actionButtonSelector) {\n        // Get the button by data-id attribute.\n        this.actionButton = document.querySelector(actionButtonSelector);\n        if (!this.actionButton) {\n            return;\n        }\n        this.contextId = this.actionButton.dataset.contextid ? parseInt(this.actionButton.dataset.contextid, 10) : 0;\n        this.userId = M.cfg.userId;\n        this.registerEventListeners();\n    }\n\n    /**\n     * Register event listeners.\n     */\n    registerEventListeners() {\n        if (!this.actionButton) {\n            return;\n        }\n\n        this.actionButton.addEventListener('click', async (event) => {\n            event.preventDefault();\n            const isPolicyAccepted = await this.isPolicyAccepted();\n            if (!isPolicyAccepted) {\n                this.displayPolicy();\n                return;\n            }\n            const isActive = await Repository.getActiveAction(this.contextId, 0);\n            if (!isActive || isActive.actionid) {\n                this.handleActionProgress(isActive.actionid);\n                return;\n            }\n            this.handleLaunchAction();\n        });\n    }\n\n    /**\n     * Handle form navigation for multi-step wizard.\n     */\n    async handleLaunchAction() {\n        const actionName = await getString(`action:${this.actionButton.dataset.actionName}`, 'aiplacement_callextensions');\n        const dialogTitle = await getString('actiondialog:title', 'aiplacement_callextensions', actionName);\n        const form = new ModalForm({\n            modalConfig: {\n                title: dialogTitle,\n            },\n            formClass: 'aiplacement_callextensions\\\\form\\\\mod_assist_action_form',\n            args: {\n                component: this.actionButton.dataset.component,\n                cmid: this.actionButton.dataset.cmid,\n                actionname: this.actionButton.dataset.actionName,\n            },\n            saveButtonText: await getString('submit'),\n        });\n\n        form.addEventListener(form.events.FORM_SUBMITTED, event => {\n            if (!event.detail.result) {\n                Notification.addNotification({\n                    type: 'info',\n                    message: event.detail.message\n                });\n            } else {\n                form.hide();\n                // Reload the page to show the new content.\n                window.location.reload();\n            }\n        });\n        form.show();\n    }\n\n    /**\n     * Handle an action already in progress.\n     * @param {Number} actionId The action id.\n     */\n    async handleActionProgress(actionId) {\n        // Create a modal to show the progress.\n        const actionName = await getString(`action:${this.actionButton.dataset.actionName}`, 'aiplacement_callextensions');\n        const modal = await ModalDeleteCancel.create({\n            title: getString('actiondialog:status', 'aiplacement_callextensions', actionName),\n            large: true,\n        });\n        const updateBody = (modal, actionId) => {\n            return Repository.actionStatus(actionId).then(async (action) => {\n                if (!action || action.status === 3) {\n                    modal.hide();\n                    modal.destroy(); // Destroy the modal.\n                    Notification.addNotification({\n                        type: 'failure',\n                        message: await getString('actiondialog:statuscheckfailure', 'aiplacement_callextensions')\n                    });\n                    clearInterval(this.progressInterval);\n                } else {\n                    if (action.status === 1 || action.status === 2) {\n                        modal.hide();\n                        modal.destroy();\n                        Notification.addNotification({\n                            type: 'failure',\n                            message: await getString('actiondialog:statuscheckfailure', 'aiplacement_callextensions')\n                        });\n                        clearInterval(this.progressInterval);\n                    } else {\n                        const content = Templates.renderForPromise('aiplacement_callextensions/progress', action);\n                        modal.setBodyContent(content);\n                    }\n                }\n            }).catch(Notification.exception);\n        };\n        modal.getRoot().on(ModalEvents.delete, () => {\n            clearInterval(this.progressInterval);\n            Repository.cancelAction(actionId).then(async () => {\n                modal.hide();\n                modal.destroy(); // Destroy the modal.\n                Notification.addNotification({\n                    type: 'success',\n                    message: await getString('actiondialog:cancelled', 'aiplacement_callextensions', actionName)\n                });\n            }).catch(Notification.exception);\n        });\n        modal.setDeleteButtonText(await getString('actiondialog:cancel', 'aiplacement_callextensions'));\n        // Initial body update.\n        await updateBody(modal, actionId);\n        const refreshHandler = () =>\n            updateBody(modal, actionId).then((shouldContinue) => !shouldContinue && clearInterval(this.progressInterval));\n        // Refresh the progress every 5 seconds.\n        this.progressInterval = setInterval(refreshHandler, 5000);\n\n        modal.show();\n    }\n\n\n    /**\n     * Display the policy.\n     */\n    async displayPolicy() {\n        const title = await getString('aiusagepolicy', 'core_ai');\n        const acceptLabel = await getString('policyaccept');\n        const usagePolicy = await getString ('userpolicy','core_ai');\n        const modal = await ModalSaveCancel.create({\n            title: title,\n            body: usagePolicy,\n        });\n        modal.setSaveButtonText(acceptLabel);\n        modal.show();\n        modal.getRoot().on(ModalEvents.save, async () => {\n            try {\n                await Policy.acceptPolicy();\n                modal.hide();\n                modal.destroy();\n                this.handleLaunchAction();\n            } catch (error) {\n                Notification.exception(error);\n            }\n        });\n    }\n\n    /**\n     * Check if the policy is accepted.\n     * @return {bool} True if the policy is accepted, false otherwise.\n     */\n    async isPolicyAccepted() {\n        return await Policy.getPolicyStatus(this.userId);\n    }\n};\n\nexport default CALLExtensionAssist;\n"],"names":["constructor","actionButtonSelector","actionButton","document","querySelector","this","contextId","dataset","contextid","parseInt","userId","M","cfg","registerEventListeners","addEventListener","async","event","preventDefault","isPolicyAccepted","displayPolicy","isActive","Repository","getActiveAction","actionid","handleLaunchAction","handleActionProgress","actionName","dialogTitle","form","ModalForm","modalConfig","title","formClass","args","component","cmid","actionname","saveButtonText","events","FORM_SUBMITTED","detail","result","hide","window","location","reload","addNotification","type","message","show","actionId","modal","ModalDeleteCancel","create","large","updateBody","actionStatus","then","action","status","destroy","clearInterval","progressInterval","content","Templates","renderForPromise","setBodyContent","catch","Notification","exception","getRoot","on","ModalEvents","delete","cancelAction","setDeleteButtonText","setInterval","shouldContinue","acceptLabel","usagePolicy","ModalSaveCancel","body","setSaveButtonText","save","Policy","acceptPolicy","error","getPolicyStatus"],"mappings":"0oCAkC4B,MA4BxBA,YAAYC,uMAEHC,aAAeC,SAASC,cAAcH,sBACtCI,KAAKH,oBAGLI,UAAYD,KAAKH,aAAaK,QAAQC,UAAYC,SAASJ,KAAKH,aAAaK,QAAQC,UAAW,IAAM,OACtGE,OAASC,EAAEC,IAAIF,YACfG,0BAMTA,yBACSR,KAAKH,mBAILA,aAAaY,iBAAiB,SAASC,MAAAA,QACxCC,MAAMC,2BACyBZ,KAAKa,oCAE3BC,sBAGHC,eAAiBC,oBAAWC,gBAAgBjB,KAAKC,UAAW,GAC7Dc,WAAYA,SAASG,cAIrBC,0BAHIC,qBAAqBL,SAASG,8CAWrCG,iBAAmB,mCAAoBrB,KAAKH,aAAaK,QAAQmB,YAAc,8BAC/EC,kBAAoB,kBAAU,qBAAsB,6BAA8BD,YAClFE,KAAO,IAAIC,mBAAU,CACvBC,YAAa,CACTC,MAAOJ,aAEXK,UAAW,2DACXC,KAAM,CACFC,UAAW7B,KAAKH,aAAaK,QAAQ2B,UACrCC,KAAM9B,KAAKH,aAAaK,QAAQ4B,KAChCC,WAAY/B,KAAKH,aAAaK,QAAQmB,YAE1CW,qBAAsB,kBAAU,YAGpCT,KAAKd,iBAAiBc,KAAKU,OAAOC,gBAAgBvB,QACzCA,MAAMwB,OAAOC,QAMdb,KAAKc,OAELC,OAAOC,SAASC,gCAPHC,gBAAgB,CACzBC,KAAM,OACNC,QAAShC,MAAMwB,OAAOQ,aAQlCpB,KAAKqB,kCAOkBC,gBAEjBxB,iBAAmB,mCAAoBrB,KAAKH,aAAaK,QAAQmB,YAAc,8BAC/EyB,YAAcC,6BAAkBC,OAAO,CACzCtB,OAAO,kBAAU,sBAAuB,6BAA8BL,YACtE4B,OAAO,IAELC,WAAa,CAACJ,MAAOD,WAChB7B,oBAAWmC,aAAaN,UAAUO,MAAK1C,MAAAA,YACrC2C,QAA4B,IAAlBA,OAAOC,UASI,IAAlBD,OAAOC,QAAkC,IAAlBD,OAAOC,OAC9BR,MAAMT,OACNS,MAAMS,gCACOd,gBAAgB,CACzBC,KAAM,UACNC,cAAe,kBAAU,kCAAmC,gCAEhEa,cAAcxD,KAAKyD,sBAChB,OACGC,QAAUC,mBAAUC,iBAAiB,sCAAuCP,QAClFP,MAAMe,eAAeH,cAlBzBZ,MAAMT,OACNS,MAAMS,gCACOd,gBAAgB,CACzBC,KAAM,UACNC,cAAe,kBAAU,kCAAmC,gCAEhEa,cAAcxD,KAAKyD,qBAexBK,MAAMC,sBAAaC,WAE1BlB,MAAMmB,UAAUC,GAAGC,sBAAYC,QAAQ,KACnCZ,cAAcxD,KAAKyD,sCACRY,aAAaxB,UAAUO,MAAK1C,UACnCoC,MAAMT,OACNS,MAAMS,gCACOd,gBAAgB,CACzBC,KAAM,UACNC,cAAe,kBAAU,yBAA0B,6BAA8BtB,iBAEtFyC,MAAMC,sBAAaC,cAE1BlB,MAAMwB,0BAA0B,kBAAU,sBAAuB,qCAE3DpB,WAAWJ,MAAOD,eAInBY,iBAAmBc,aAHD,IACnBrB,WAAWJ,MAAOD,UAAUO,MAAMoB,iBAAoBA,gBAAkBhB,cAAcxD,KAAKyD,qBAE3C,KAEpDX,MAAMF,mCAQAlB,YAAc,kBAAU,gBAAiB,WACzC+C,kBAAoB,kBAAU,gBAC9BC,kBAAoB,kBAAW,aAAa,WAC5C5B,YAAc6B,2BAAgB3B,OAAO,CACvCtB,MAAOA,MACPkD,KAAMF,cAEV5B,MAAM+B,kBAAkBJ,aACxB3B,MAAMF,OACNE,MAAMmB,UAAUC,GAAGC,sBAAYW,MAAMpE,oBAEvBqE,gBAAOC,eACblC,MAAMT,OACNS,MAAMS,eACDpC,qBACP,MAAO8D,6BACQjB,UAAUiB,iDAUlBF,gBAAOG,gBAAgBlF,KAAKK"}