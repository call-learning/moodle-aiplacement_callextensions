{"version":3,"file":"placement.min.js","sources":["../src/placement.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to load and render the form for the CALL Learning placement module.\n *\n * @module     aiplacement_callextensions/placement\n * @copyright  2025 Laurent David <laurent@call-learning.fr>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport 'core/copy_to_clipboard';\nimport Notification from 'core/notification';\nimport FormWizard from 'aiplacement_callextensions/form_wizard';\nimport {getString} from 'core/str';\n\n\nconst CALLExtensionAssist = class {\n    /**\n     * The context ID.\n     * @type {Integer}\n     */\n    contextId;\n\n    /**\n     * The current action\n     * @type {String}\n     */\n    currentAction;\n    /**\n     * The current action data\n     * @type {String}\n     */\n    currentActionData;\n\n    /**\n     * The current generated content data\n     * @type {String}\n     */\n    currentGeneratedContent;\n\n    /**\n     * Constructor.\n     * @param {String} actionButtonSelector The selector for the action button.\n     */\n    constructor(actionButtonSelector ) {\n        // Get the button by data-id attribute.\n        this.actionButton = document.querySelector(actionButtonSelector);\n        if (!this.actionButton) {\n            return;\n        }\n        this.contextId = this.actionButton.dataset.contextid ? parseInt(this.actionButton.dataset.contextid, 10) : 0;\n\n        this.registerEventListeners();\n    }\n\n    /**\n     * Register event listeners.\n     */\n    registerEventListeners() {\n        if (!this.actionButton) {\n            return;\n        }\n\n        this.actionButton.addEventListener('click', async (event) => {\n            event.preventDefault();\n            this.handleFormNavigation(1);\n        });\n    }\n\n    /**\n     * Handle form navigation for multi-step wizard.\n     * @param {number} step The step to navigate to. Defaults to 1.\n     */\n    handleFormNavigation(step) {\n        const wizard = new FormWizard({\n            modalConfig: {\n                title: getString('wizardtitle', 'aiplacement_callextensions'),\n            },\n            formClass: 'aiplacement_callextensions\\\\form\\\\mod_assist_action_form',\n            args: {\n                action: this.actionButton.dataset.aiAction,\n                component: this.actionButton.dataset.component,\n                cmid: this.actionButton.dataset.cmid,\n                step: step,\n            },\n            saveButtonText: getString('next', 'aiplacement_callextensions'),\n        });\n\n        wizard.addEventListener(wizard.events.FORM_SUBMITTED, event => {\n            if (!event.detail.result) {\n                Notification.addNotification({\n                    type: 'error',\n                    message: event.detail.errors.join('<br>')\n                });\n            } else {\n                // Reload the form with updated step data.\n                this.handleFormNavigation(event.detail.actiondata.step);\n            }\n        });\n\n        wizard.show();\n    }\n\n    /**\n     * Check if the AI drawer is open.\n     * @return {boolean} True if the AI drawer is open, false otherwise.\n     */\n    isAIDrawerOpen() {\n        return this.aiDrawerElement.classList.contains('show');\n    }\n\n    /**\n     * Open the AI drawer.\n     */\n    openAIDrawer() {\n        this.aiDrawerElement.classList.add('show');\n    }\n\n    /**\n     * Close the AI drawer.\n     */\n    closeAIDrawer() {\n        this.aiDrawerElement.classList.remove('show');\n    }\n\n    /**\n     * Toggle the AI drawer.\n     */\n    toggleAIDrawer() {\n        if (this.isAIDrawerOpen()) {\n            this.closeAIDrawer();\n        } else {\n            this.openAIDrawer();\n        }\n    }\n\n    /**\n     * Clear actions.\n     */\n    clearActions() {\n        this.aiDrawerBodyElement.dataset.currentAction = '';\n        this.aiDrawerBodyElement.dataset.currentActionData = '';\n    }\n};\n\nexport default CALLExtensionAssist;\n"],"names":["constructor","actionButtonSelector","actionButton","document","querySelector","this","contextId","dataset","contextid","parseInt","registerEventListeners","addEventListener","async","event","preventDefault","handleFormNavigation","step","wizard","FormWizard","modalConfig","title","formClass","args","action","aiAction","component","cmid","saveButtonText","events","FORM_SUBMITTED","detail","result","actiondata","addNotification","type","message","errors","join","show","isAIDrawerOpen","aiDrawerElement","classList","contains","openAIDrawer","add","closeAIDrawer","remove","toggleAIDrawer","clearActions","aiDrawerBodyElement","currentAction","currentActionData"],"mappings":"2pBA6B4B,MA4BxBA,YAAYC,yNAEHC,aAAeC,SAASC,cAAcH,sBACtCI,KAAKH,oBAGLI,UAAYD,KAAKH,aAAaK,QAAQC,UAAYC,SAASJ,KAAKH,aAAaK,QAAQC,UAAW,IAAM,OAEtGE,0BAMTA,yBACSL,KAAKH,mBAILA,aAAaS,iBAAiB,SAASC,MAAAA,QACxCC,MAAMC,sBACDC,qBAAqB,MAQlCA,qBAAqBC,YACXC,OAAS,IAAIC,qBAAW,CAC1BC,YAAa,CACTC,OAAO,kBAAU,cAAe,+BAEpCC,UAAW,2DACXC,KAAM,CACFC,OAAQlB,KAAKH,aAAaK,QAAQiB,SAClCC,UAAWpB,KAAKH,aAAaK,QAAQkB,UACrCC,KAAMrB,KAAKH,aAAaK,QAAQmB,KAChCV,KAAMA,MAEVW,gBAAgB,kBAAU,OAAQ,gCAGtCV,OAAON,iBAAiBM,OAAOW,OAAOC,gBAAgBhB,QAC7CA,MAAMiB,OAAOC,YAOThB,qBAAqBF,MAAMiB,OAAOE,WAAWhB,4BANrCiB,gBAAgB,CACzBC,KAAM,QACNC,QAAStB,MAAMiB,OAAOM,OAAOC,KAAK,aAQ9CpB,OAAOqB,OAOXC,wBACWlC,KAAKmC,gBAAgBC,UAAUC,SAAS,QAMnDC,oBACSH,gBAAgBC,UAAUG,IAAI,QAMvCC,qBACSL,gBAAgBC,UAAUK,OAAO,QAM1CC,iBACQ1C,KAAKkC,sBACAM,qBAEAF,eAObK,oBACSC,oBAAoB1C,QAAQ2C,cAAgB,QAC5CD,oBAAoB1C,QAAQ4C,kBAAoB"}